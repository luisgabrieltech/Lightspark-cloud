name: LightSpark CI/CD

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Teste e Validação
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3
    
    - name: Configurar Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Instalar dependências
      run: npm ci
      
    - name: Verificar sintaxe do código
      run: |
        echo "Verificando a sintaxe do código..."
        find Backend -name "*.js" -exec node -c {} \;
    
    - name: Verificar vulnerabilidades
      run: npm audit --production
      continue-on-error: true

  build:
    name: Build e Publicação
    needs: test
    runs-on: ubuntu-latest
    if: success() && github.event_name != 'pull_request'

    steps:
    - name: Checkout do código
      uses: actions/checkout@v3
    
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login no Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Determinar tag da imagem
      id: image-tag
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/heads/}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build e Push da imagem
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/lightspark:${{ steps.image-tag.outputs.tag }}
          ${{ secrets.DOCKER_HUB_USERNAME }}/lightspark:latest
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/lightspark:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/lightspark:buildcache,mode=max

  deploy-stage:
    name: Deploy em Staging
    needs: build
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy para ambiente de staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /opt/lightspark-staging
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker system prune -f

  deploy-prod:
    name: Deploy em Produção
    needs: [build, deploy-stage]
    runs-on: ubuntu-latest
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    environment:
      name: production
      url: https://lightspark.exemplo.com
    
    steps:
    - name: Deploy para produção
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /opt/lightspark-production
          docker-compose pull
          docker-compose down
          docker-compose up -d
          docker system prune -f 